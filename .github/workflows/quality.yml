name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  # Code coverage analysis
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Coverage report
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  # Dependency vulnerability scan
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy (dependency vulnerability scanner)
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          echo "Checking licenses for all dependencies..." >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          go-licenses report ./... >> $GITHUB_STEP_SUMMARY || true
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Save license report
        run: |
          go-licenses csv ./... > licenses.csv

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.csv

  # Code complexity analysis
  complexity:
    name: Code Complexity
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install gocyclo
        run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

      - name: Install gocognit
        run: go install github.com/uudashr/gocognit/cmd/gocognit@latest

      - name: Cyclomatic complexity
        run: |
          echo "## Cyclomatic Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "Functions with complexity > 10:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          gocyclo -over 10 . >> $GITHUB_STEP_SUMMARY || echo "No functions with high cyclomatic complexity found" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Cognitive complexity
        run: |
          echo "## Cognitive Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "Functions with complexity > 15:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          gocognit -over 15 . >> $GITHUB_STEP_SUMMARY || echo "No functions with high cognitive complexity found" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  # Performance regression testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          path: base

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          path: pr

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install benchcmp
        run: go install golang.org/x/tools/cmd/benchcmp@latest

      - name: Run base benchmarks
        run: |
          cd base/test
          go mod download
          go test -bench=. -benchmem ./integration/ > ../base-bench.txt

      - name: Run PR benchmarks
        run: |
          cd pr/test
          go mod download
          go test -bench=. -benchmem ./integration/ > ../pr-bench.txt

      - name: Compare benchmarks
        run: |
          echo "## Performance Comparison" >> $GITHUB_STEP_SUMMARY
          echo "Comparing performance between base branch and PR:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          benchcmp base/base-bench.txt pr/pr-bench.txt >> $GITHUB_STEP_SUMMARY || echo "No significant performance changes detected" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-comparison
          path: |
            base/base-bench.txt
            pr/pr-bench.txt

  # Documentation quality check
  docs-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if [ ! -f README.md ]; then
            echo "❌ README.md not found"
            exit 1
          fi
          
          # Check README length
          lines=$(wc -l < README.md)
          if [ $lines -lt 50 ]; then
            echo "⚠️ README.md seems too short ($lines lines)"
          else
            echo "✅ README.md looks good ($lines lines)"
          fi

      - name: Check Go documentation
        run: |
          echo "## Go Documentation Coverage" >> $GITHUB_STEP_SUMMARY
          echo "Checking for missing documentation..." >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          
          # Find exported functions/types without documentation
          missing_docs=0
          for file in $(find . -name "*.go" -not -path "./vendor/*" -not -name "*_test.go"); do
            # This is a simplified check - in practice you'd use a more sophisticated tool
            if grep -q "^func [A-Z]" "$file" || grep -q "^type [A-Z]" "$file"; then
              echo "Checking $file for documentation..."
            fi
          done
          
          echo "Documentation check completed" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Check documentation build
        run: |
          cd docs
          npm ci
          npm run build
          npm run lint-links

  # Code duplication check
  duplication:
    name: Code Duplication
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Install dupl
        run: go install github.com/mibk/dupl@latest

      - name: Check for duplicated code
        run: |
          echo "## Code Duplication Report" >> $GITHUB_STEP_SUMMARY
          echo "Checking for duplicated code blocks..." >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          dupl -threshold 50 . >> $GITHUB_STEP_SUMMARY || echo "No significant code duplication found" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  # Generate quality report
  quality-report:
    name: Quality Report
    runs-on: ubuntu-latest
    needs: [coverage, vulnerability-scan, license-check, complexity, docs-quality, duplication]
    if: always()
    steps:
      - name: Generate quality summary
        run: |
          echo "# Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated on: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Analysis: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Complexity Analysis: ${{ needs.complexity.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation Quality: ${{ needs.docs-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Duplication Check: ${{ needs.duplication.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.coverage.result }}" == "success" && 
                "${{ needs.vulnerability-scan.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.complexity.result }}" == "success" && 
                "${{ needs.docs-quality.result }}" == "success" && 
                "${{ needs.duplication.result }}" == "success" ]]; then
            echo "✅ **All quality checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some quality checks failed. Please review the results above.**" >> $GITHUB_STEP_SUMMARY
          fi
