name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD | head -20)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: Release ${{ steps.get_version.outputs.tag_name }}
          body: |
            ## Changes in ${{ steps.get_version.outputs.tag_name }}

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            go get github.com/scagogogo/gradle-parser@${{ steps.get_version.outputs.tag_name }}
            ```

            ## Documentation

            - [API Documentation](https://scagogogo.github.io/gradle-parser/api/)
            - [User Guide](https://scagogogo.github.io/gradle-parser/guide/)
            - [Examples](https://github.com/scagogogo/gradle-parser/tree/${{ steps.get_version.outputs.tag_name }}/examples)

            ## Checksums

            See the assets below for checksums of the release artifacts.
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.tag_name, '-') }}

  # Build and upload release assets
  build-assets:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Build examples
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist

          # Build each example
          for example in examples/*/; do
            if [ -f "$example/main.go" ]; then
              example_name=$(basename "$example")
              output_name="gradle-parser-${example_name}-${{ matrix.goos }}-${{ matrix.goarch }}"

              if [ "${{ matrix.goos }}" = "windows" ]; then
                output_name="${output_name}.exe"
              fi

              echo "Building $example_name for ${{ matrix.goos }}/${{ matrix.goarch }}"
              cd "$example"
              go build -ldflags="-s -w" -o "../dist/$output_name" .
              cd ..
            fi
          done

      - name: Create archive
        run: |
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r "gradle-parser-examples-${{ matrix.goos }}-${{ matrix.goarch }}.zip" .
          else
            tar -czf "gradle-parser-examples-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" .
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  # Upload all assets to release
  upload-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [release, build-assets]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done

          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt

      - name: Upload all assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release.outputs.tag_name }}
          files: release-assets/*

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        run: |
          cd docs
          npm ci

      - name: Build documentation
        run: |
          cd docs
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/.vitepress/dist
          cname: scagogogo.github.io

  # Notify on completion
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, build-assets, upload-assets, update-docs]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "üöÄ Release ${{ needs.release.outputs.tag_name }} completed!"
          echo "üì¶ Assets built for multiple platforms"
          echo "üîê Checksums generated"
          echo "üìö Documentation updated"
          echo ""
          echo "Release URL: https://github.com/scagogogo/gradle-parser/releases/tag/${{ needs.release.outputs.tag_name }}"
          echo "Documentation: https://scagogogo.github.io/gradle-parser/"
